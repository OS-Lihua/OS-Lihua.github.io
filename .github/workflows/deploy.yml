name: Deploy to GitHub Pages # 工作流名称，描述此工作流的目的

on:
  # 触发条件：定义工作流何时运行
  push:
    branches: [main] # 每次推送到 main 分支时触发
  workflow_dispatch: # 允许手动触发工作流（通过 GitHub 界面）

# 权限设置：定义工作流需要的权限
permissions:
  contents: read # 允许读取代码库内容
  pages: write # 允许写入 GitHub Pages

jobs:
  build: # 构建任务，负责安装依赖和生成站点
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 环境运行
    steps:
      - name: Checkout your repository using git # 步骤名称：检出代码库
        uses: actions/checkout@v4 # 使用 GitHub 提供的 actions/checkout 插件，版本 v4

      - name: Get Yarn cache directory # 步骤名称：获取 Yarn 缓存目录
        id: yarn-cache # 设置一个唯一 ID，以便后续步骤引用
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT # 执行 shell 命令，获取 Yarn 缓存路径并输出

      - name: Cache Yarn dependencies # 步骤名称：缓存 Yarn 依赖
        uses: actions/cache@v3 # 使用 actions/cache 插件，版本 v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }} # 缓存路径，使用上一步输出的 Yarn 缓存目录
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }} # 缓存 key，基于操作系统和 yarn.lock 文件的哈希值
          restore-keys: |
            ${{ runner.os }}-yarn-  # 如果精确 key 未命中，尝试恢复此备用 key 的缓存

      - name: Install, build, and upload your site # 步骤名称：安装依赖、构建并上传站点
        uses: withastro/action@v3 # 使用 Astro 提供的 action 插件，版本 v3（建议检查是否有更新版本）
        with:
          path: . # Astro 项目根目录，这里假设为当前目录
          node-version: 20 # 指定 Node.js 版本为 20
          package-manager: yarn@1.22.19 # 指定包管理器为 Yarn，版本 1.22.19
        env:
          CI: true # 设置环境变量 CI=true，表示在持续集成环境中运行
        run: |
          echo "Starting build..."  # 输出提示信息，表示构建开始
          yarn install  # 安装项目依赖
          yarn build    # 执行构建命令，生成静态站点
          echo "Build completed."  # 输出提示信息，表示构建完成

  deploy: # 部署任务，负责将构建好的站点发布到 GitHub Pages
    needs: build # 依赖：必须在 build 任务完成后运行
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 环境运行
    environment:
      name: github-pages # 部署环境名称，设置为 GitHub Pages
      url: ${{ steps.deployment.outputs.page_url }} # 部署完成后生成的页面 URL
    steps:
      - name: Check build artifacts # 步骤名称：检查构建产物
        run: |
          if [ ! -d "_site" ]; then  # 检查 _site 目录是否存在（Astro 默认输出目录）
            echo "Build artifacts not found!"  # 如果不存在，输出错误信息
            exit 1  # 退出并返回错误码 1，表示失败
          fi

      - name: Deploy to GitHub Pages # 步骤名称：部署到 GitHub Pages
        id: deployment # 设置一个唯一 ID，以便引用部署结果
        uses: actions/deploy-pages@v4 # 使用 GitHub 提供的 actions/deploy-pages 插件，版本 v4
